.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Timer 3"
.TH Timer 3 "2015-06-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Coro::Timer \- timers and timeouts, independent of any event loop
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # This package is mostly obsoleted by Coro::AnyEvent.
\&
\& use Coro::Timer qw(timeout);
\& # nothing exported by default
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package has been mostly obsoleted by Coro::AnyEvent, the only
really useful function left in here is \f(CW\*(C`timeout\*(C'\fR.
.ie n .IP "$flag = timeout $seconds" 4
.el .IP "\f(CW$flag\fR = timeout \f(CW$seconds\fR" 4
.IX Item "$flag = timeout $seconds"
This function will wake up the current coroutine after \f(CW$seconds\fR seconds
and sets \f(CW$flag\fR to true (it is false initially).  If \f(CW$flag\fR goes out
of scope earlier then nothing happens.
.Sp
This is used by Coro itself to implement the \f(CW\*(C`timed_down\*(C'\fR, \f(CW\*(C`timed_wait\*(C'\fR
etc. primitives. It is used like this:
.Sp
.Vb 2
\&   sub timed_wait {
\&      my $timeout = Coro::Timer::timeout 60;
\&
\&      while (condition false) {
\&         Coro::schedule; # wait until woken up or timeout
\&         return 0 if $timeout; # timed out
\&      }
\&
\&      return 1; # condition satisfied
\&   }
.Ve
.SH "AUTHOR/SUPPORT/CONTACT"
.IX Header "AUTHOR/SUPPORT/CONTACT"
.Vb 2
\&   Marc A. Lehmann <schmorp@schmorp.de>
\&   http://software.schmorp.de/pkg/Coro.html
.Ve
