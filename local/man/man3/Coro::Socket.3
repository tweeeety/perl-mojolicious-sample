.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Socket 3"
.TH Socket 3 "2015-06-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Coro::Socket \- non\-blocking socket\-I/O
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Coro::Socket;
\&
\& # listen on an ipv4 socket
\& my $socket = new Coro::Socket PeerHost => "localhost",
\&                               PeerPort => \*(Aqfinger\*(Aq;
\&
\& # listen on any other type of socket
\& my $socket = Coro::Socket\->new_from_fh
\&                 (IO::Socket::UNIX\->new
\&                     Local  => "/tmp/socket",
\&                     Type   => SOCK_STREAM,
\&                 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is an AnyEvent user, you need to make sure that you use and
run a supported event loop.
.PP
This module implements socket-handles in a coroutine-compatible way,
that is, other coroutines can run while reads or writes block on the
handle. See Coro::Handle, especially the note about prefering method
calls.
.SH "IPV6 WARNING"
.IX Header "IPV6 WARNING"
This module was written to imitate the IO::Socket::INET \s-1API\s0, and derive
from it. Since IO::Socket::INET does not support IPv6, this module does
neither.
.PP
Therefore it is not recommended to use Coro::Socket in new code. Instead,
use AnyEvent::Socket and Coro::Handle, e.g.:
.PP
.Vb 3
\&   use Coro;
\&   use Coro::Handle;
\&   use AnyEvent::Socket;
\&
\&   # use tcp_connect from AnyEvent::Socket
\&   # and call Coro::Handle::unblock on it.
\&
\&   tcp_connect "www.google.com", 80, Coro::rouse_cb;
\&   my $fh = unblock +(Coro::rouse_wait)[0];
\&
\&   # now we have a perfectly thread\-safe socket handle in $fh
\&   print $fh "GET / HTTP/1.0\e015\e012\e015\e012";
\&   local $/;
\&   print <$fh>;
.Ve
.PP
Using \f(CW\*(C`AnyEvent::Socket::tcp_connect\*(C'\fR gives you transparent IPv6,
multi-homing, SRV-record etc. support.
.PP
For listening sockets, use \f(CW\*(C`AnyEvent::Socket::tcp_server\*(C'\fR.
.ie n .IP "$fh = new Coro::Socket param => value, ..." 4
.el .IP "\f(CW$fh\fR = new Coro::Socket param => value, ..." 4
.IX Item "$fh = new Coro::Socket param => value, ..."
Create a new non-blocking tcp handle and connect to the given host
and port. The parameter names and values are mostly the same as for
IO::Socket::INET (as ugly as I think they are).
.Sp
The parameters officially supported currently are: \f(CW\*(C`ReuseAddr\*(C'\fR,
\&\f(CW\*(C`LocalPort\*(C'\fR, \f(CW\*(C`LocalHost\*(C'\fR, \f(CW\*(C`PeerPort\*(C'\fR, \f(CW\*(C`PeerHost\*(C'\fR, \f(CW\*(C`Listen\*(C'\fR, \f(CW\*(C`Timeout\*(C'\fR,
\&\f(CW\*(C`SO_RCVBUF\*(C'\fR, \f(CW\*(C`SO_SNDBUF\*(C'\fR.
.Sp
.Vb 1
\&   $fh = new Coro::Socket PeerHost => "localhost", PeerPort => \*(Aqfinger\*(Aq;
.Ve
.SH "AUTHOR/SUPPORT/CONTACT"
.IX Header "AUTHOR/SUPPORT/CONTACT"
.Vb 2
\&   Marc A. Lehmann <schmorp@schmorp.de>
\&   http://software.schmorp.de/pkg/Coro.html
.Ve
