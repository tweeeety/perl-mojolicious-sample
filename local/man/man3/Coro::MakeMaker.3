.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "MakeMaker 3"
.TH MakeMaker 3 "2015-06-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Coro::MakeMaker \- MakeMaker glue for the XS\-level Coro API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This allows you to control coroutines from C/XS.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For optimal performance, hook into Coro at the C\-level. You'll need to
make changes to your \f(CW\*(C`Makefile.PL\*(C'\fR and add code to your \f(CW\*(C`xs\*(C'\fR / \f(CW\*(C`c\*(C'\fR
file(s).
.SH "WARNING"
.IX Header "WARNING"
When you hook in at the C\-level you can get a \fIhuge\fR performance gain,
but you also reduce the chances that your code will work unmodified with
newer versions of \f(CW\*(C`perl\*(C'\fR or \f(CW\*(C`Coro\*(C'\fR. This may or may not be a problem.
Just be aware, and set your expectations accordingly.
.SH "HOW TO"
.IX Header "HOW TO"
.SS "Makefile.PL"
.IX Subsection "Makefile.PL"
.Vb 1
\&  use Coro::MakeMaker qw(coro_args);
\&
\&  # ... set up %args ...
\&
\&  WriteMakefile (coro_args (%args));
.Ve
.SS "\s-1XS\s0"
.IX Subsection "XS"
.Vb 1
\&  #include "CoroAPI.h"
\&
\&  BOOT:
\&    I_CORO_API ("YourModule");
.Ve
.SS "\s-1API\s0"
.IX Subsection "API"
This is just a small overview \- read the Coro/CoroAPI.h header file in
the distribution, and check the examples in \fI\s-1EV/\s0\fR and \fIEvent/*\fR, or
as a more real-world example, the Deliantra game server (which uses
Coro::MakeMaker).
.PP
You can also drop me a mail if you run into any trouble.
.PP
.Vb 10
\& #define CORO_TRANSFER(prev,next) /* transfer from prev to next */
\& #define CORO_SCHEDULE            /* like Coro::schedule */
\& #define CORO_CEDE                /* like Coro::cede */
\& #define CORO_CEDE_NOTSELF        /* like Coro::cede_notself */
\& #define CORO_READY(coro)         /* like $coro\->ready */
\& #define CORO_IS_READY(coro)      /* like $coro\->is_ready */
\& #define CORO_NREADY              /* # of procs in ready queue */
\& #define CORO_CURRENT             /* returns $Coro::current */
\& #define CORO_THROW               /* exception pending? */
\& #define CORO_READYHOOK           /* hook for event libs, see Coro::EV */
\&
\& /* C\-level coroutine struct, opaque, not used much */
\& struct coro;
\&
\& /* used for schedule\-like\-function prepares */
\& struct coro_transfer_args
\& {
\&   struct coro *prev, *next;
\& };
\&
\& /* this is the per\-perl\-coro slf frame info */
\& struct CoroSLF
\& {
\&   void (*prepare) (pTHX_ struct coro_transfer_args *ta); /* 0 means not yet initialised */
\&   int (*check) (pTHX_ struct CoroSLF *frame);
\&   void *data; /* for use by prepare/check/destroy */
\&   void (*destroy) (pTHX_ struct CoroSLF *frame);
\& };
\&
\& /* needs to fill in the *frame */
\& typedef void (*coro_slf_cb) (pTHX_ struct CoroSLF *frame, CV *cv, SV **arg, int items);
\&
\& #define CORO_SV_STATE(coro)      /* returns the internal struct coro * */
\& #define CORO_EXECUTE_SLF(cv,init,ax) /* execute a schedule\-like function */
\& #define CORO_EXECUTE_SLF_XS(init) /* SLF in XS, see e.g. Coro::EV */
\&
\& /* called on enter/leave */
\& typedef void (*coro_enterleave_hook) (pTHX_ void *arg);
\&
\& #define CORO_ENTERLEAVE_HOOK(coro,enter,enter_arg,leave,leave_arg)   /* install an XS\-level enter/leave hook */
\& #define CORO_ENTERLEAVE_UNHOOK(coro,enter,leave)                     /* remove an XS\-level enter/leave hook */
\& #define CORO_ENTERLEAVE_SCOPE_HOOK(enter,enter_arg,leave,leave_arg)  /* install an XS\-level enter/leave hook for the corrent scope */
.Ve
.SH "AUTHOR/SUPPORT/CONTACT"
.IX Header "AUTHOR/SUPPORT/CONTACT"
.Vb 2
\&   Marc A. Lehmann <schmorp@schmorp.de>
\&   http://software.schmorp.de/pkg/Coro.html
.Ve
