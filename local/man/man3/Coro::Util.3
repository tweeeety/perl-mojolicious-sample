.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Util 3"
.TH Util 3 "2015-06-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Coro::Util \- various utility functions.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Coro::Util;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements various utility functions, mostly replacing perl
functions by non-blocking counterparts.
.PP
Many of these functions exist for the sole purpose of emulating existing
interfaces, no matter how bad or limited they are (e.g. no IPv6 support).
.PP
This module is an AnyEvent user. Refer to the AnyEvent
documentation to see how to integrate it into your own programs.
.ie n .IP "$ipn = Coro::Util::inet_aton $hostname || $ip" 4
.el .IP "\f(CW$ipn\fR = Coro::Util::inet_aton \f(CW$hostname\fR || \f(CW$ip\fR" 4
.IX Item "$ipn = Coro::Util::inet_aton $hostname || $ip"
Works almost exactly like its \f(CW\*(C`Socket::inet_aton\*(C'\fR counterpart, except
that it does not block other coroutines.
.Sp
Does not handle multihomed hosts or IPv6 \- consider using
\&\f(CW\*(C`AnyEvent::Socket::resolve_sockaddr\*(C'\fR with the Coro rouse functions
instead.
.IP "gethostbyname, gethostbyaddr" 4
.IX Item "gethostbyname, gethostbyaddr"
Work similarly to their Perl counterparts, but do not block. Uses
\&\f(CW\*(C`AnyEvent::Util::inet_aton\*(C'\fR internally.
.Sp
Does not handle multihomed hosts or IPv6 \- consider using
\&\f(CW\*(C`AnyEvent::Socket::resolve_sockaddr\*(C'\fR or \f(CW\*(C`AnyEvent::DNS::reverse_lookup\*(C'\fR
with the Coro rouse functions instead.
.ie n .IP "@result = Coro::Util::fork_eval { ... }, @args" 4
.el .IP "\f(CW@result\fR = Coro::Util::fork_eval { ... }, \f(CW@args\fR" 4
.IX Item "@result = Coro::Util::fork_eval { ... }, @args"
Executes the given code block or code reference with the given arguments
in a separate process, returning the results. The return values must be
serialisable with Coro::Storable. It may, of course, block.
.Sp
Note that using event handling in the sub is not usually a good idea as
you will inherit a mixed set of watchers from the parent.
.Sp
Exceptions will be correctly forwarded to the caller.
.Sp
This function is useful for pushing cpu-intensive computations into a
different process, for example to take advantage of multiple \s-1CPU\s0's. Its
also useful if you want to simply run some blocking functions (such as
\&\f(CW\*(C`system()\*(C'\fR) and do not care about the overhead enough to code your own
pid watcher etc.
.Sp
This function might keep a pool of processes in some future version, as
fork can be rather slow in large processes.
.Sp
You should also look at \f(CW\*(C`AnyEvent::Util::fork_eval\*(C'\fR, which is newer and
more compatible to totally broken Perl implementations such as the one
from ActiveState.
.Sp
Example: execute some external program (convert image to rgba raw form)
and add a long computation (extract the alpha channel) in a separate
process, making sure that never more then \f(CW$NUMCPUS\fR processes are being
run.
.Sp
.Vb 1
\&   my $cpulock = new Coro::Semaphore $NUMCPUS;
\&
\&   sub do_it {
\&      my ($path) = @_;
\&
\&      my $guard = $cpulock\->guard;
\&
\&      Coro::Util::fork_eval {
\&         open my $fh, "convert \-depth 8 \eQ$path\eE rgba:"
\&            or die "$path: $!";
\&
\&         local $/;
\&         # make my eyes hurt
\&         pack "C*", unpack "(xxxC)*", <$fh>
\&      }
\&   }
\&
\&   my $alphachannel = do_it "/tmp/img.png";
.Ve
.SH "AUTHOR/SUPPORT/CONTACT"
.IX Header "AUTHOR/SUPPORT/CONTACT"
.Vb 2
\&   Marc A. Lehmann <schmorp@schmorp.de>
\&   http://software.schmorp.de/pkg/Coro.html
.Ve
