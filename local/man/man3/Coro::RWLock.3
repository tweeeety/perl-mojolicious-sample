.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "RWLock 3"
.TH RWLock 3 "2015-06-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Coro::RWLock \- reader/write locks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Coro;
\&
\& $lck = new Coro::RWLock;
\&
\& $lck\->rdlock; # acquire read lock
\& $lck\->unlock; # unlock lock again
\&
\& # or:
\& $lck\->wrlock; # acquire write lock
\& $lck\->tryrdlock; # try a readlock
\& $lck\->trywrlock; # try a write lock
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements reader/write locks. A read can be acquired for
read by many coroutines in parallel as long as no writer has locked it
(shared access). A single write lock can be acquired when no readers
exist. RWLocks basically allow many concurrent readers (without writers)
\&\s-1OR\s0 a single writer (but no readers).
.PP
You don't have to load \f(CW\*(C`Coro::RWLock\*(C'\fR manually, it will be loaded 
automatically when you \f(CW\*(C`use Coro\*(C'\fR and call the \f(CW\*(C`new\*(C'\fR constructor.
.ie n .IP "$l = new Coro::RWLock;" 4
.el .IP "\f(CW$l\fR = new Coro::RWLock;" 4
.IX Item "$l = new Coro::RWLock;"
Create a new reader/writer lock.
.ie n .IP "$l\->rdlock" 4
.el .IP "\f(CW$l\fR\->rdlock" 4
.IX Item "$l->rdlock"
Acquire a read lock.
.ie n .IP "$l\->tryrdlock" 4
.el .IP "\f(CW$l\fR\->tryrdlock" 4
.IX Item "$l->tryrdlock"
Try to acquire a read lock.
.ie n .IP "$l\->wrlock" 4
.el .IP "\f(CW$l\fR\->wrlock" 4
.IX Item "$l->wrlock"
Acquire a write lock.
.ie n .IP "$l\->trywrlock" 4
.el .IP "\f(CW$l\fR\->trywrlock" 4
.IX Item "$l->trywrlock"
Try to acquire a write lock.
.ie n .IP "$l\->unlock" 4
.el .IP "\f(CW$l\fR\->unlock" 4
.IX Item "$l->unlock"
Give up a previous \f(CW\*(C`rdlock\*(C'\fR or \f(CW\*(C`wrlock\*(C'\fR.
.SH "AUTHOR/SUPPORT/CONTACT"
.IX Header "AUTHOR/SUPPORT/CONTACT"
.Vb 2
\&   Marc A. Lehmann <schmorp@schmorp.de>
\&   http://software.schmorp.de/pkg/Coro.html
.Ve
